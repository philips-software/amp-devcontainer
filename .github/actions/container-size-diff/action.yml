---
name: "Container Size Diff"
description: "Creates a Markdown summary of the size difference between two container versions"

inputs:
  from-container:
    description: "Baseline container image for size comparison"
    required: true
  to-container:
    description: "Container image to be compared to the baseline"
    required: true

outputs:
  size-diff-markdown:
    description: "Markdown formatted output of container size comparison"
    value: ${{ steps.size-diff.outputs.markdown }}

runs:
  using: "composite"
  steps:
    - uses: actions/setup-node@a0853c24544627f65ddf259abe73b1d18a591444 # v5.0.0
      with:
        node-version: 22.x

    - uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd # v8.0.0
      id: size-diff
      env:
        FROM_CONTAINER: ${{ inputs.from-container }}
        TO_CONTAINER: ${{ inputs.to-container }}
      with:
        script: |
          const { execFileSync } = require('child_process');

          function formatBytes(bytes) {
              if (bytes === 0) return '0 B';
              const k = 1024;
              const sizes = ['B', 'KiB', 'MiB', 'GiB', 'TiB'];
              const i = Math.floor(Math.log(Math.abs(bytes)) / Math.log(k));
              const size = Math.abs(bytes) / Math.pow(k, i);
              return `${size.toFixed(2)} ${sizes[i]}`;
          }

          function getSizesFromManifest(container) {
            try {
                const manifestJson = execFileSync("docker", ["manifest", "inspect", "-v", container], { encoding: "utf8" });
                const manifests = JSON.parse(manifestJson.trim());
                const manifestArray = Array.isArray(manifests) ? manifests : [manifests];

                const sizeMap = {};
                for (const manifest of manifestArray) {
                    const platform = manifest.Descriptor?.platform;
                    if (!platform) continue;

                    const platformParts = [
                        platform.os,
                        platform.architecture,
                        platform.variant,
                        platform["os.version"]
                    ].filter(Boolean);

                    const platformString = platformParts.join("/");
                    if (platformString !== "unknown/unknown") {
                        const layers = manifest.OCIManifest?.layers || [];
                        const totalSize = layers.reduce((sum, layer) => sum + (layer.size || 0), 0);
                        sizeMap[platformString] = totalSize;
                    }
                }
                return sizeMap;
            } catch (error) {
                console.error(`Failed to get manifest for ${container}:`, error.message);
                return {};
            }
          }

          const fromContainer = process.env.FROM_CONTAINER;
          const toContainer = process.env.TO_CONTAINER;
          const fromSizes = getSizesFromManifest(fromContainer);
          const toSizes = getSizesFromManifest(toContainer);

          const allPlatforms = [...new Set([...Object.keys(fromSizes), ...Object.keys(toSizes)])];

          let output = "## ðŸ“¦ Container Size Analysis\n\n";
          output += `Comparing \`${fromContainer}\` to \`${toContainer}\`\n\n`;
          output += "### ðŸ“ˆ Size Comparison Table\n\n";
          output += "| OS/Platform | Previous Size | Current Size | Change | Trend |\n";
          output += "|-------------|:-------------:|:------------:|:------:|:-----:|\n";

          for (const platform of allPlatforms) {
              const fromSize = fromSizes[platform] || 0;
              const toSize = toSizes[platform] || 0;
              const delta = toSize - fromSize;

              const percentChange = fromSize === 0
                ? (toSize > 0 ? '+âˆž' : '+0.00')
                : `${delta >= 0 ? '+' : ''}${(delta / fromSize * 100).toFixed(2)}`;

              const icon = delta < 0 ? 'ðŸ”½' : delta > 0 ? 'ðŸ”¼' : 'ðŸ”„';
              const sign = delta >= 0 ? '+' : '';

              output += `| ${platform} | ${formatBytes(fromSize)} | ${formatBytes(toSize)} | ${sign}${formatBytes(Math.abs(delta))} (${percentChange}%) | ${icon} |\n`;
          }

          core.setOutput('markdown', output);
