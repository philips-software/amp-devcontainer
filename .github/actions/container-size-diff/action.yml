---
name: "Container Size Diff"
description: "Creates a Markdown summary of the size difference between two container versions"

inputs:
  from-container:
    description: "Baseline container image for size comparison"
    required: true
  to-container:
    description: "Container image to be compared to the baseline"
    required: true

outputs:
  size-diff-markdown:
    description: "Markdown formatted output of container size comparison"
    value: ${{ steps.size-diff.outputs.markdown }}

runs:
  using: "composite"
  steps:
    - run: |
        cat > package.json << 'EOF'
        {
          "dependencies": {
            "execa": "^9.6.0",
            "filesize": "^11.0.2",
            "lodash": "^4.0.0",
            "markdown-table": "^3.0.4"
          }
        }
        EOF
      shell: bash

    - uses: actions/setup-node@a0853c24544627f65ddf259abe73b1d18a591444 # v5.0.0
      with:
        cache: npm
        cache-dependency-path: package.json
        node-version: 22.x

    - run: npm install
      shell: bash

    - uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd # v8.0.0
      id: size-diff
      env:
        FROM_CONTAINER: ${{ inputs.from-container }}
        TO_CONTAINER: ${{ inputs.to-container }}
      with:
        script: |
          const { execaSync } = require("execa");
          const { filesize } = require("filesize");
          const { markdownTable } = require("markdown-table");
          const _ = require("lodash");

          const fromContainer = process.env.FROM_CONTAINER;
          const toContainer = process.env.TO_CONTAINER;

          async function getSizes(container) {
              try {
                  const { stdout } = execaSync("docker", ["manifest", "inspect", "-v", container]);
                  const manifests = _.castArray(JSON.parse(stdout.trim()));

                  return _(manifests)
                      .map(m => {
                          const platform = _.get(m, 'Descriptor.platform', {});

                          const key = _.compact([
                              platform.os,
                              platform.architecture,
                              platform.variant,
                              platform["os.version"]
                          ])
                          .join("/");

                          const layers = _.get(m, 'OCIManifest.layers') || _.get(m, 'layers', []);
                          const total = _.sumBy(layers, 'size');

                          return [key, total];
                      })
                      .fromPairs()
                      .value();
              } catch (e) {
                  core.error(`Failed to inspect ${container}: ${e.message}`);
                  return {};
              }
          }

          const fromSizes = await getSizes(fromContainer);
          const toSizes   = await getSizes(toContainer);

          const platforms = _(fromSizes)
              .keys()
              .union(_.keys(toSizes))
              .filter(platform => platform && !platform.includes("unknown"))
              .sort()
              .value();

          const platformRow = (platform) => {
              const previous = _.get(fromSizes, platform, 0);
              const current = _.get(toSizes, platform, 0);
              const change = current - previous;

              const percentage = previous
                  ? `${change >= 0 ? "+" : "-"}${_.round(change / previous * 100, 2)}%`
                  : current ? "+âˆž" : "+0.00%";

              const icon = _.cond([
                  [change => change < 0, _.constant("ðŸ”½")],
                  [change => change > 0, _.constant("ðŸ”¼")],
                  [_.stubTrue, _.constant("ðŸ”„")]
              ])(change);

              return [
                  platform,
                  filesize(previous),
                  filesize(current),
                  `${change >= 0 ? "+" : "-"}${filesize(Math.abs(change))} (${percentage})`,
                  icon
              ];
          };

          const rows = [
              ["OS/Platform", "Previous", "Current", "Change", "Trend"],
              ..._.map(platforms, platformRow)
          ];

          const output = `## ðŸ“¦ Container Size Analysis

          > [!NOTE]
          > Comparing \`${fromContainer}\` âž” \`${toContainer}\`

          ### ðŸ“ˆ Size Comparison Table

          ${markdownTable(rows, { align: ["l", "c", "c", "c", "c"] })}`;

          core.setOutput("markdown", output);

              output += `| ${platform} | ${formatBytes(fromSize)} | ${formatBytes(toSize)} | ${sign}${formatBytes(Math.abs(delta))} (${percentChange}%) | ${icon} |\n`;
          }

          core.setOutput('markdown', output);
