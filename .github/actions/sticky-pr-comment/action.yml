name: 'Sticky PR Comment'
description: 'Creates, updates or deletes a PR comment identified by a hidden marker'
branding:
  icon: message-circle
  color: blue

inputs:
  pr-number:
    description: 'Pull request number'
    required: true
  body:
    description: 'Comment body content (without marker) to upsert. Required unless mode=delete.'
    required: false
  marker:
    description: 'Unique hidden marker to identify the sticky comment'
    default: 'sticky-comment'
    required: false
  mode:
    description: 'Operation mode: upsert or delete'
    default: 'upsert'
    required: false

runs:
  using: 'composite'
  steps:
    - name: Validate inputs
      env:
        MODE: ${{ inputs.mode }}
        BODY: ${{ inputs.body }}
      shell: bash
      run: |
        set -Eeuo pipefail

        case "${MODE}" in
          upsert|delete) ;;
          *) echo "Invalid mode: ${MODE} (expected upsert|delete)" >&2; exit 1;;
        esac

        if [ "${MODE}" = delete ]; then
          exit 0
        fi

        if [ -z "${BODY}" ]; then
          echo 'Input "body" is required in upsert mode' >&2
          exit 1
        fi
    - name: Upsert comment
      if: inputs.mode == 'upsert'
      env:
        GH_TOKEN: ${{ github.token }}
        PR_NUMBER: ${{ inputs.pr-number }}
        MARKER: ${{ inputs.marker }}
        BODY: ${{ inputs.body }}
      shell: bash
      run: |
        set -Eeuo pipefail

        MARKER_COMMENT="<!-- ${MARKER} -->"
        FULL_BODY="${MARKER_COMMENT}\n${BODY}"
        EXISTING_ID=$(gh api "repos/${GITHUB_REPOSITORY}/issues/${PR_NUMBER}/comments" --jq ".[] | select(.body|contains(\"${MARKER_COMMENT}\")) | .id" | head -n1 || true)

        if [ -n "${EXISTING_ID}" ]; then
          echo "Updating existing sticky comment (${EXISTING_ID})"
          gh api "repos/${GITHUB_REPOSITORY}/issues/comments/${EXISTING_ID}" -X PATCH -f body="${FULL_BODY}"
        else
          echo "Creating new sticky comment"
          gh api "repos/${GITHUB_REPOSITORY}/issues/${PR_NUMBER}/comments" -f body="${FULL_BODY}"
        fi
    - name: Delete comment(s)
      if: inputs.mode == 'delete'
      env:
        GH_TOKEN: ${{ github.token }}
        PR_NUMBER: ${{ inputs.pr-number }}
        MARKER: ${{ inputs.marker }}
      shell: bash
      run: |
        set -Eeuo pipefail

        MARKER_COMMENT="<!-- ${MARKER} -->"
        FOUND_IDS=$(gh api "repos/${GITHUB_REPOSITORY}/issues/${PR_NUMBER}/comments" --jq ".[] | select(.body|contains(\"${MARKER_COMMENT}\")) | .id" || true)

        if [ -z "${FOUND_IDS}" ]; then
          echo "No sticky comment(s) to delete";
          exit 0;
        fi

        for id in ${FOUND_IDS}; do
          echo "Deleting sticky comment $id"
          gh api "repos/${GITHUB_REPOSITORY}/issues/comments/${id}" -X DELETE
        done
